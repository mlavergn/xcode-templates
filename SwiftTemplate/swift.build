#!/usr/bin/swift

//
// This is a temporary fix for the fact that swift build defaults to the current platform
// and doesn't allow an override via parameters (yet). We generate the build yaml files
// then regex modify them to work with our intended target.
//

import Foundation

class SwiftBuild {
  //
  // Configuration settings used by the build yamls
  //
  let settings = [
      "ios": ["sdk":"iPhoneOS", "target":"armv7-apple-ios10.0"],
      "sim": ["sdk":"iPhoneSimulator", "target":"x86_64-apple-ios10.0"],
      "mac": ["sdk":"MacOSX", "target":"x86_64-apple-macosx10.10"],
    ]

  //
  // Execute xcode-select to determine install path
  //
  func xcodePath() -> String {
    var result:String?
    let pipe = Pipe()

    let outHandle = pipe.fileHandleForReading
    outHandle.readabilityHandler = { (pipe:FileHandle) in
      var line = String(data:pipe.availableData, encoding:String.Encoding.utf8)
      if line!.characters.count > 0 {
        line = line!.trimmingCharacters(in:NSCharacterSet.whitespacesAndNewlines)
        result = line
      }
    }

    let task = Process()
    task.launchPath = "/usr/bin/xcode-select"
    task.arguments = ["-p"]
    task.standardOutput = pipe
    task.launch()
    task.waitUntilExit()

    return result!
  }

  //
  // URL of the current working directory
  //
  func currentWorkingDirectoryURL() -> URL {
    let filePath = FileManager.default.currentDirectoryPath
    let result = Foundation.URL(string:"file://\(filePath)")

    return result!
  }

  //
  // Determines if the configuration yaml exists
  //
  func exists(config:String) -> (valid:Bool, url:URL) {
    let path = currentWorkingDirectoryURL().appendingPathComponent(".build/\(config).yaml")

    return (FileManager.default.fileExists(atPath:path.path), path)
  }

  //
  // Read in the configuration yaml
  //
  func read(config:String) -> String {
    let path = exists(config:config)
    var result = ""
    if path.valid {
      result = try! String(contentsOf:path.url, encoding:String.Encoding.utf8)
    }

    return result
  }

  //
  // Write out the configuration yaml
  //
  func write(config:String, contents:String) {
    let path = exists(config:config)
    if path.valid {
      try! contents.write(to:path.url, atomically:false, encoding:String.Encoding.utf8)
    }
  }

  //
  // Blows away the .build directory
  //
  func setup(config:String, showErrors:Bool) -> Int32 {
    let task = Process()
    task.launchPath = "/usr/bin/swift"
    task.arguments = ["build", "--configuration", config]
    // silence errors which are irrelevant since we just need the yaml as a template
    if !showErrors {
    task.standardOutput = nil
    task.standardError = nil
    }
    task.launch()
    task.waitUntilExit()
    let result = task.terminationStatus
    if result != 0 && !showErrors{
      _ = setup(config:config, showErrors:true)
    }

    return result
  }

  //
  // Blows away the .build directory
  //
  func clean() {
    let path = currentWorkingDirectoryURL().appendingPathComponent("/.build")
    try? FileManager.default.removeItem(at:path)
  }

  //
  // Detects the sdk/target in the specified configuration yaml
  //
  func detect(config:String) -> String {
    var result:String?
    let contents = read(config:config)
    if contents.characters.count > 0 {
      for entry in settings {
        if contents.range(of:entry.value["sdk"]!) != nil {
          result = entry.key
          break
        }
      }
    }

    return result!
  }

  //
  // Wraps the regex logic for reuse
  //
  func replace(contents:String, pattern:String, withTemplate:String) -> String {
      let regex = try! NSRegularExpression(pattern:pattern, options:[])
      return regex.stringByReplacingMatches(in:contents, options:[], range:NSRange(0..<contents.characters.count), withTemplate:withTemplate)
  }

  //
  // Workhorse routine that edits the yaml contents
  //
  func reconfig(config:String, oldTarget:[String:String], newTarget:[String:String]) {
    var contents = read(config:config)

    let oldSDK = oldTarget["sdk"]!
    let newSDK = newTarget["sdk"]!

    let oldPlatform = oldTarget["target"]!
    let newPlatform = newTarget["target"]!

    contents = replace(contents:contents, pattern:"\(oldSDK).platform", withTemplate:"\(newSDK).platform")
    contents = replace(contents:contents, pattern:"\(oldSDK)[0-9.]*.sdk", withTemplate:"\(newSDK).sdk")
    contents = replace(contents:contents, pattern:oldPlatform, withTemplate:newPlatform)

    write(config:config, contents:contents)
  }

  //
  // Call the exec underlying "swift build" so we can specify which configuration yaml to use
  //
  func build(target:String, config:String) {
    print("Building for \(target) ...")
    let task = Process()
    let xcodePath = self.xcodePath()

    task.launchPath = "\(xcodePath)/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift-build-tool"
    task.arguments = ["-C", ".build", "-f", "\(config).yaml"]
    task.launch()
    task.waitUntilExit()
  }
}

//
// Main logic where we interpret the arguments and detemine the intent
//

var arg1valid = ["ios", "sim", "mac"]
var arg2valid = ["debug", "release", "clean"]

let sb = SwiftBuild()

let arguments = CommandLine.arguments
if arguments.count < 3 {
  print("Requires parameters [ ios / sim / mac ] and [debug / release / clean]")
} else {
  if !arg1valid.contains(arguments[1]) || !arg2valid.contains(arguments[2]) {
    print("Invalild argument")
  } else {
    if arguments[2] == "clean" {
      sb.clean()
    } else {
      let errcode = sb.setup(config:arguments[2], showErrors:false)
        if errcode == 0 {
        let oldTarget = sb.detect(config:arguments[2])
        let newTarget = arguments[1]
        if oldTarget != newTarget {
          sb.reconfig(config:arguments[2], oldTarget:sb.settings[oldTarget]!, newTarget:sb.settings[newTarget]!)
        }

        sb.build(target:arguments[1], config:arguments[2])
      }
    }
  }
}

