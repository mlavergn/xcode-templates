#!/usr/bin/swift

//
// This is a temporary fix for the fact that swift build defaults the the current platform
// and doesn't allow an override via parameters (yet). We generate the build yaml files
// then regex them to work with our intended target.
// * Now available as a Swift script!
//

import Foundation

enum Config:String {
    case Unkown = "unkown"
    case iOS = "ios"
    case Sim = "sim"
    case Mac = "mac"
}

enum Target:String {
    case iOS = "armv7-apple-ios10.0"
    case Sim = "x86_64-apple-ios10.0"
    case Mac = "x86_64-apple-macosx10.10"
}

enum SDK:String {
    case iOS = "iPhoneOS"
    case Sim = "iPhoneSimulator"
    case Mac = "MacOSX"
}

func exists(config:String) -> Bool {
  let filePath = FileManager.default.currentDirectoryPath
  var path = Foundation.URL(string:"file://\(filePath)")
  path = path!.appendingPathComponent(".build/\(config).yaml")

  return FileManager.default.fileExists(atPath:path!.path)
}

func setup(config:String) {
  let task = Process()
  task.launchPath = "/usr/bin/swift"
  task.arguments = ["build", "--configuration", config]
  task.launch()
  task.waitUntilExit()
}

func clean() {
  let filePath = FileManager.default.currentDirectoryPath
  var path = Foundation.URL(string:"file://\(filePath)")
  path = path!.appendingPathComponent("/.build")
  try! FileManager.default.removeItem(at:path!)
}

func detect(config:String) -> String {
  var result:String
  let contents = read(config:config)
  if contents.range(of:SDK.iOS.rawValue) != nil {
    result = Config.iOS.rawValue
  } else if contents.range(of:SDK.Sim.rawValue) != nil {
    result = Config.Sim.rawValue
  } else if contents.range(of:SDK.Mac.rawValue) != nil {
    result = Config.Mac.rawValue
  } else {
    result = Config.Unkown.rawValue
  }

  return result
}

func read(config:String) -> String {
  let filePath = FileManager.default.currentDirectoryPath
  var path = Foundation.URL(string:"file://\(filePath)")
  path = path!.appendingPathComponent(".build/\(config).yaml")

  let result = try! String(contentsOf:path!, encoding:String.Encoding.utf8)

  return result
}

func replace(contents:String, pattern:String, withTemplate:String) -> String {
    let regex = try! NSRegularExpression(pattern:pattern, options:[])
    return regex.stringByReplacingMatches(in:contents, options:[], range:NSRange(0..<contents.utf8.count), withTemplate:withTemplate)
}

func reconfig(config:String, oldSDK:String, newSDK:String, oldTarget:String, newTarget:String) {
  var contents = read(config:config)

  contents = replace(contents:contents, pattern:"\(oldSDK).platform", withTemplate:"\(newSDK).platform")
  contents = replace(contents:contents, pattern:"\(oldSDK)[0-9.]*.sdk", withTemplate:"\(newSDK).sdk")
  contents = replace(contents:contents, pattern:oldTarget, withTemplate:newTarget)

  write(config:config, contents:contents)
}

func write(config:String, contents:String) {
  let filePath = FileManager.default.currentDirectoryPath
  var path = Foundation.URL(string:"file://\(filePath)")
  path = path!.appendingPathComponent(".build/\(config).yaml")

  try! contents.write(to:path!, atomically:false, encoding:String.Encoding.utf8)
}

func build(config:String) {
  let task = Process()
  task.launchPath = "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift-build-tool"
  task.arguments = ["-C", ".build", "-f", "\(config).yaml"]
  task.launch()
  task.waitUntilExit()
}


let arguments = CommandLine.arguments
if arguments.count < 3 {
  print("Requires parameters [ ios / sim / mac ] and [debug / release / clean]")
} else {
  if arguments[2] == "clean" {
    clean()
  } else {
    if !exists(config:arguments[2]) {
      setup(config:arguments[2])
    }

    if detect(config:arguments[2]) != arguments[1] {
      reconfig(config:arguments[2], oldSDK:SDK.Mac.rawValue, newSDK:SDK.Sim.rawValue, oldTarget:Target.Mac.rawValue, newTarget:Target.Sim.rawValue)
    }

    build(config:arguments[2])
  }
}

